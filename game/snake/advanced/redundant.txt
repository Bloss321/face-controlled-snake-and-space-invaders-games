Result metrics - main.py
    advanced_game_result_metrics = {
        "number_of_game_failures": 0,
        "scores_per_game": [],  # number of fruit eaten
        "snakes_killed_per_game": [],
        "hits_per_game": []
    }

laser functionality - snake.py

    laser_direction = Direction.NEUTRAL  # will remove!
    laser_x = None
    laser_y = None

    # for the advanced game
    # release_laser = False  # back to false after laser_collision is true  - removing
    laser_collision = False  # laser has collided with the bad fruit
    laser_state = "inactive"  # active/inactive or active (maybe should be enum)
    laser_out_of_bounds = False
    lasers: list[Laser2] = []  # do I need?

     #  for the advanced game

    # this method only works on first iteration? Laser stops after 1 block
    def fire_laser_simple(self, display, count):
        # laser initially starts with no direction, as the first call:  laser direction =  snake direction
        # laser_x = last_laser_pos[0] + (self.laser_direction.value.get('x') * (self.square_size * count))
        # laser_y = last_laser_pos[1] + (self.laser_direction.value.get('y') * (self.square_size * count))

        if count == 1:
            self.laser_direction = self.direction
            snake_head = self.body[-1]
            self.laser_x = snake_head.x
            self.laser_y = snake_head.y

        # the laser direction should always stay the same, until a new one is called
        # need to be able to shoot multiple lasers

        # snake_head = self.body[-1]
        self.laser_x = self.laser_x + (self.laser_direction.value.get('x') * (self.square_size * count))
        self.laser_y = self.laser_y + (self.laser_direction.value.get('y') * (self.square_size * count))
        thickness = self.square_size * 0.2
        laser_length = self.square_size
        laser_colour = (255, 0, 255)

        laser = pygame.Rect(self.laser_x, self.laser_y, thickness, laser_length)
        if self.laser_direction == Direction.LEFT or self.laser_direction == Direction.RIGHT:
            laser = pygame.Rect(self.laser_x, self.laser_y, laser_length, thickness)

        pygame.draw.rect(display, laser_colour, laser)

        laser_pos = (self.laser_x, self.laser_y)
        return laser_pos

    def check_laser_out_of_bounds(self, laser_x, laser_y):
        if laser_x not in range(0, self.display_width) or laser_y not in range(0, self.display_height):
            self.laser_out_of_bounds = True